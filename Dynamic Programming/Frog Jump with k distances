#include<algorithm>
int minimum(int n,int k,vector<int> &height,int dp[]){
        if(dp[n]!=-1) return dp[n];
        if(n==0) return 0;
        int mini=INT_MAX;
        for(int i=1;i<=k;i++)
        {
            if (n - i >=0) {
                int temp=minimum(n-i,k,height,dp)+abs(height[n]-height[n-i]);
                // cout<<temp<<" "<<mini<<"\n";
                mini=min(mini,temp);
            }
        }
        dp[n]=mini;
        return mini;
}

int minimizeCost(int n, int k, vector<int> &height){
    int dp[n];
    for (int i = 0; i <n; i++){
            dp[i] = -1;
    }
    return minimum(n-1,k,height,dp);
}
