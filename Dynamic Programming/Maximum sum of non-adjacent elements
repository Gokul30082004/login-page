#include <algorithm>
#include <bits/stdc++.h>

int maximum(vector<int> &nums, int n,int dp[]) {
  if(dp[n]!=-1) return dp[n];
  if (n == 0 || n == 1)
    return nums[n];
  int temp = INT_MIN;
  for (int i = 2; i <= n; i++) {
    if (n - i >= 0) {
      int count = maximum(nums, n - i,dp) + nums[n];
      temp = max(temp, count);
      //cout<<"\n"<<temp<<"   ";
    }
  }
  dp[n]=temp;
  return temp;
}

int maximumNonAdjacentSum(vector<int> &nums) {
  if (nums.size() == 1)
    return nums[0];
  if (nums.size() == 2) {
    if (nums[0] > nums[1])
      return nums[0];
    else
      return nums[1];
  }
  int ans=INT_MIN;
  int dp[nums.size()];
  for(int i=0;i<nums.size();i++)
  dp[i]=-1;
  for (int i = 1; i <=nums.size() - 1; i++) {
    ans=max(ans,maximum(nums, nums.size()-i,dp));
    //cout<<ans<<" "<<i;
  }
  return ans;
}
